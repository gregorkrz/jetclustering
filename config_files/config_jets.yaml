graph_config:


custom_model_kwargs:
   # add custom model kwargs here

treename: mmtree/Events;1
selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   #(jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) & (((sample_isQCD==0) & (fj_isQCD==0)) | ((sample_isQCD==1) & (fj_isQCD==1))) & (event_no%7!=0)
   #(recojet_e>=5)

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   #(jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) & (((sample_isQCD==0) & (fj_isQCD==0)) | ((sample_isQCD==1) & (fj_isQCD==1))) & (event_no%7==0)
   #(recojet_e<5)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   #pfcand_mask: awkward.JaggedArray.ones_like(pfcand_etarel)
   #sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   #pfcand_mask: awkward.JaggedArray.ones_like(pfcand_e)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`

inputs:
  n_jets:
    pad_mode: wrap
    length: 1
    vars:
      - [nJet, null]
      - [nJetId, null]
  jets:
    pad_mode: wrap
    length: 100
    vars:
       - [Jet_pt, null]
       - [Jet_eta, null]
       - [Jet_phi, null]
       - [Jet_mass, null]
       - [Jet_area, null]

labels:
   ### type can be `simple`, `custom`
  ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   #type: simple
   #value: [
   #   hit_ty
   #   ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value:
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

observers:
   #- recojet_e
   #- recojet_theta
   #- recojet_phi
   #- recojet_m
   #- n_pfcand
